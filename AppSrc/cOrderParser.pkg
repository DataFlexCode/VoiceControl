Use UI
Use GlobalFunctionsProcedures.pkg

#IFNDEF _struct_stItem
    Struct stItem
        String  sItem
        Integer iQty
        Number  nPrice
        Number  nTotal
    End_Struct
#ENDIF

#IFNDEF C_Digits
    Define C_Digits for "0123456789"
#ENDIF

Class cOrderParser is a cObject
    
    Procedure Construct_Object
        Forward Send Construct_Object
        
        Property String[] pasDrinks
        Property Number[] panPrices

        Send AddDrink "beer"         3.80
        Send AddDrink "water"        0   
        Send AddDrink "tea"          3.50
        Send AddDrink "coffee"       4.15
        Send AddDrink "gin"          5.30
        Send AddDrink "whisky"       5.90
        Send AddDrink "whiskey"      5.90
        Send AddDrink "rum"          4.90
        Send AddDrink "vodka"        4.50
        Send AddDrink "brandy"       6.10
        Send AddDrink "brandie"      6.10
        Send AddDrink "brandy's"     6.10
        Send AddDrink "cognac"       7.20
        Send AddDrink "orange"       0.40
        Send AddDrink "soda"         0.35
        Send AddDrink "coke"         0.60
        Send AddDrink "lime"         0.20
        Send AddDrink "chip"         0.65
        Send AddDrink "crisp"        0.65
        Send AddDrink "lemonade"     0.30
        Send AddDrink "coke-a-cola"  0.70
        Send AddDrink "scotch"       5.90
        Send AddDrink "malt"         7.10
        Send AddDrink "lager"        3.90
        Send AddDrink "bitter"       3.95
        Send AddDrink "ale"          4.10
        Send AddDrink "wine"         0.80
        Send AddDrink "tonic"        0.85
        Send AddDrink "ginger"       0.55
        Send AddDrink "whiskies"     5.90
        Send AddDrink "rosé"         4.15
        Send AddDrink "champagne"    6.20
        Send AddDrink "cider"        3.10
        Send AddDrink "tomato"       0.50
        Send AddDrink "brandy'"      6.10
        Send AddDrink "guinness"     4.15
        Send AddDrink "lemon"        0.45
        Send AddDrink "proseco"      4.90
        Send AddDrink "cava"         4.50
    End_Procedure
    
    Procedure AddDrink String sName Number nPrice
        String[] asDrinks
        Number[] anPrices
        Integer i
        
        Get pasDrinks to asDrinks
        Get panPrices to anPrices
        
        Move (SizeOfArray(asDrinks)) to i
        Move sName  to asDrinks[i]
        Move nPrice to anPrices[i]
        
        Set pasDrinks to asDrinks
        Set panPrices to anPrices
    End_Procedure
    
    // ToDo: This could be extened
    Function WordsToNum String sWord Returns String
        If (sWord = "one")   Function_Return "1"
        If (sWord = "two")   Function_Return "2"
        If (sWord = "three") Function_Return "3"
        If (sWord = "four")  Function_Return "4"
        If (sWord = "five")  Function_Return "5"
        If (sWord = "six")   Function_Return "6"
        If (sWord = "seven") Function_Return "7"
        If (sWord = "eight") Function_Return "8"
        If (sWord = "nine")  Function_Return "9"
        Function_Return sWord
    End_Function
    
    Function IsNumber String sWord Returns Boolean
        Boolean bIsNum
        Integer iLen i
        
        Move (Length(sWord)) to iLen
        Move True to bIsNum
        
        For i from 1 to iLen
            If not (C_Digits contains Mid(sWord, 1, i)) ;
                Move False to bIsNum
        Until not bIsNum
        
        Function_Return bIsNum
    End_Function
    
    Function ParseOrder String sOrder Returns stItem[]
        String[] asWords asDrinks
        Number[] anPrices
        Integer  i iMax j iIdx iQty
        stItem[] atOrder
        String   sQty sItem
        
        If (sOrder = "") ;
            Function_Return atOrder
        
        Move (Lowercase(sOrder)) to sOrder
        Get pasDrinks to asDrinks
        Get panPrices to anPrices
        
        Move (StrSplitToArray(sOrder, " ")) to asWords
        Move (SizeOfArray(asWords) - 1) to iMax
        Move 0 to j
        Move 1 to iQty
        
        For i from 0 to iMax
            Move (WordsToNum(Self, asWords[i])) to sQty
            
            If (IsNumber(Self, sQty)) ;
                Move sQty to iQty
            Else Begin
                Move asWords[i] to sItem
                
                // Remove trailing period if present
                If (Right(sItem, 1) = ".") ;
                    Move (Left(sItem, (Length(sItem) - 1))) to sItem
                // Remove trailing comma if present
                If (Right(sItem, 1) = ",") ;
                    Move (Left(sItem, (Length(sItem) - 1))) to sItem
                    
                Move (SearchArray(sItem, asDrinks)) to iIdx
                
                // If failed, try without any trailing "s"
                If ((iIdx = -1) and (Right(sItem, 1) = "s")) Begin
                    Move (Left(sItem, (Length(sItem) - 1))) to sItem
                    Move (SearchArray(sItem, asDrinks))     to iIdx
                End
                
                If (iIdx > -1) Begin
                    
                    // Wind needs colour!  (Rosé is a separate item.)
                    If (asWords[i] = "wine") Begin
                        If (asWords[i - 1] = "red") ;
                            Move "red wine" to asWords[i]
                        If (asWords[i - 1] = "white") ;
                            Move "white wine" to asWords[i]
                        If (asWords[i - 1] = "elderflower") ;
                            Move "elderflower wine" to asWords[i]
                        If (asWords[i - 1] = "tonic") ;
                            Move "tonic wine" to asWords[i]
                    End
                    
                    If (asWords[i] = "tomato") ;
                        Move "tomato juice" to asWords[i]
                    If (asWords[i] = "orange") ;
                        Move "orange juice" to asWords[i]
                    
                    Move asWords[i]                 to atOrder[j].sItem
                    Move anPrices[iIdx]             to atOrder[j].nPrice
                    Move iQty                       to atOrder[j].iQty
                    Move (iQty * anPrices[iIdx])    to atOrder[j].nTotal
                    
                    Move 1 to iQty
                    Increment j
                End

            End
            
        Loop
        
        Function_Return atOrder
    End_Function

End_Class